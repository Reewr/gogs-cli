'use strict';

/**
 * Generic Error for all Errors generated by the Gogs
 * Client API
 *
 * @extends {Error}
 */
class GogsCliError extends Error {
  constructor(...args) {
    super(...args);
  }
}

/**
 * An error that can be used to indicate that the status code received
 * from Gogs is out of the ordinary and we have no idea how to handle
 * it. In most cases it is often just useful to log this error to the
 * console and say quits.
 *
 * There are, however, some cases where it is nice to handle these
 * specific cases. For instance, if a repository already exists, Gogs
 * will, most likely correctly, reply with status code 422. Since this
 * case is so specific, we rather handle it in a generic way
 *
 * @extends {GogsCliError}
 */
class UnknownStatusCode extends GogsCliError {
  constructor(statusCode, url) {
    super(`An unknown statuscode of ${statusCode} occurred towards ${url}`);
    this.statusCode = statusCode;
    this.url = url;
  }
}

/**
 * This error is to be used when the token that is given is invalid
 * token or if the resource request is out of reach for the token.
 *
 * @extends {GogsCliError}
 */
class InvalidAccess extends GogsCliError {
  constructor() {
    super('Your access token is invalid ' +
          'or you do not have access to ' +
          'the requested resource');
  }
}

/**
 * This error should be used when a request is badly formatted. In
 * theory, this should never happen as the request should be formatted
 * properly before being sent and any errors should be picked up and
 * logged before then.
 *
 * @extends {GogsCliError}
 */
class InvalidRequest extends GogsCliError {
  constructor(body) {
    super('A request that was made was invalid. ' +
          'This should not really have happened. ' +
          'Body from Gogs: ' + JSON.stringify(body));
  }
}

/**
 * Gogs has a lot of quirks and answers some requests with 500. This
 * should be fixed by Gogs.
 *
 * @extends {GogsCliError}
 */
class InternalGogsError extends GogsCliError {
  constructor() {
    super('Gogs answered with an Internal Server Error');
  }
}

/**
 * This is to be used if the user tries to request a resource that does
 * not exist.
 *
 * @extends {GogsCliError}
 */
class NotFound extends GogsCliError {
  constructor(type, resources) {
    if (!type)
      super('Resource was not found');
    else if (type && !resources)
      super(type);
    else
      super(`${type}: "${resources}" was not found`);
  }
}

/**
 * This is to be used if the user tries to request a resource that does
 * not exist.
 *
 * @extends {GogsCliError}
 */
class InvalidArgument extends GogsCliError {
  constructor(expected, got) {
    let msg = `Invalid arguments: Expected ${expected}`;

    if (got)
      msg += `, got: ${got}`;
    super(msg);
  }
}

module.exports = {
  GogsCliError,
  InvalidAccess,
  InvalidRequest,
  InternalGogsError,
  NotFound,
  InvalidArgument,
  UnknownStatusCode
};
