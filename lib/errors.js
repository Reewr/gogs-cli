'use strict';

/**
 * Generic Error for all Errors generated by the Gogs
 * Client API
 *
 * @extends {Error}
 */
class GogsCliError extends Error {
  constructor(args) {
    super(...args);
  }
}

/**
 * This error is to be used when the token that is given is invalid
 * token or if the resource request is out of reach for the token.
 *
 * @extends {GogsCliError}
 */
class InvalidAccess extends GogsCliError {
  constructor() {
    super('Your access token is invalid ' +
          'or you do not have access to ' +
          'the requested resource');
  }
}

/**
 * This error should be used when a request is badly formatted. In
 * theory, this should never happen as the request should be formatted
 * properly before being sent and any errors should be picked up and
 * logged before then.
 *
 * @extends {GogsCliError}
 */
class InvalidRequest extends GogsCliError {
  constructor() {
    super('A request that was made was invalid. ' +
          'This should not really have happened. ');
  }
}

/**
 * Gogs has a lot of quirks and answers some requests with 500. This
 * should be fixed by Gogs.
 *
 * @extends {GogsCliError}
 */
class InternalGogsError extends GogsCliError {
  constructor() {
    super('Gogs answered with an Internal Server Error');
  }
}

/**
 * This is to be used if the user tries to request a resource that does
 * not exist.
 *
 * @extends {GogsCliError}
 */
class NotFound extends GogsCliError {
  constructor(type, resources) {
    super(`${type}: "${resources}" was not found`);
  }
}

module.exports = {
  GogsCliError,
  InvalidAccess,
  InvalidRequest,
  InternalGogsError,
  NotFound
};
